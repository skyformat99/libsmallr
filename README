To compile, run `make`.

Also, note that this is not a library as of yet. Mostly testing and development.
I haven't bothered to create a 'testing' directory or anything, as really,
nothing is even done yet. Testing only works on x64, as of now, due to me only
having an x64 computer. I will probably add x86 compatibility soon, all that
needs to be changed is that the arguments need to be moved from the stack and
into %edi, %esi, and %edx.

COMPILED LAYOUT (width in bytes):

    4 | flags
    4 | len of string constants section
    n | zstring data
    4 | len of character class section
    n | character class data
    n | executable code

CALLING:

    The executable code should be cast to a pointer of type
    int(char *, void *), the first being the string to apply the regular
    expression to, the second shall point to an array of group objects at
    least the number of groups found in the pattern long, and the function
    will return an integer representing errors. No errors, or 0, denotes a
    completely successful match, but that does not mean anything besides 0
    means failure.

REGISTERS:
    %eax |
    %ebx |
    %ecx |
    %edx | base of "character class" array
    %esi | string position pointer
    %edi |

VARIABLES:

    -4  |

PROLOGUE:

    pusha
    enter #

EPILOGUE:

    popa
    leave
    ret

CHECK IF CHARACTER MATCHES:

    cmp

CHECK IF A STRING MATCHES (predefined num. of chars):
CHECK IF IN CLASS:
BRANCH:

